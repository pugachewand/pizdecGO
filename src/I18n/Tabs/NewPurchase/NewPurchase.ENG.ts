import { DoorPositionEntity } from '../../../BackendEntities/Cart/PurchaseRepoEntity';
import { NewPurchaseI18n } from './NewPurchase.i18n'

export const NewPurchaseENG: NewPurchaseI18n = {
	title: 'Purchase',
	newPurchase: {
		errorTitle: 'Failed to open the micro-market',
		incorrectQrCode: 'Invalid QR-code has been read',
		lastPosOperationIncomplete: 'Another user makes a purchase in this micro-market. Please wait.',
		purchaseNotAllowed: 'Purchases are not yet possible,\n please try again later',
		negativeBalance: 'Oops! You have an unpaid cheque ‚òπÔ∏è\nCannot open the window. Please pay for it and try againüôÇ',
		purchaseInitiationFailed: 'Failed to initiate a purchase. Please try again later.',
		invalidPaymentSystem: 'The payment method you specified is not supported by the point of sale. Your card is probably issued in another country. Please change your payment method.',
		doorToTitle: door => {
			switch (door) {
				case DoorPositionEntity.Left: return 'Left'
				case DoorPositionEntity.Right: return 'Right'
				default: return 'Left'
			}
		},
		scanQRCodeToOpenPosPartI: 'Scan a QR-code to',
		scanQRCodeToOpenPosPartII: 'open the micro-market',
		unauthorizedCameraText: 'Failed to get permission to access the camera ‚òπÔ∏è.\nPlease tap the "Update" button and give permission to access.',
		openingDoor: {
			title: 'Opening the micro-market',
			description: 'Something went wrong.\nTrying to connect to the micro-market.',
			time: (sec: number) => `It will not take more than ${sec} s.`,
		},
		noPromotionTitle: 'No promotions yet',
		noPromotionBody: 'Promotions and marketing offers will be shown here',
		posUnavailable: {
			title: 'Oops...\nWe couldn‚Äôt open a micro-market for you',
			description: 'The problem may be related to the quality of your Internet connection or you need to add point of sale data to the engineering menu.',
			closeButton: 'Close',
			supportButton: 'Contact us',
		},
		posIsOccupiedByVisitor: {
			title: 'Micromarket is currently occupied by another customer',
			description: 'Please try again when the micromarket is free.',
		},
		or: 'or',
		scan: 'Scan',
	},
	multiplePurchase: {
		loadingText: 'Processing payment...',
		title: 'Purchase',
		pay: 'Pay',
		openDoor: 'Open the door',
		openAnotherDoor: 'Another door',
		scanQRText: 'Scan the product label',
		availableBonuses: 'Bonuses available',
		totalSum: 'Total',
		payBonuses: 'For bonuses:',
		payMoney: 'Pay with money',
		getBonuses: 'Get bonuses:',
		deleteMsgTitle: 'Item deleted',
		itemIsNotFound: 'QR-code not found',
		barcodeIsNotFound: 'Barcode not found',
		itemIsNotFoundDesc: isQR => `Scan a ${isQR ? 'QR-code' : 'barcode'} of product`,
		scanQrorBarcode: 'Scan the QR or barcode of the product',
		posOperationIsNotFound: 'No product with such a label was found in this micro-market',
		posOperationIsPaid: 'Transaction paid',
		itemHasAlreadyDeleted: 'Item has been deleted',
		unexpectedError: 'Unexpected error',
		itemDoesNotBelongToPos: 'The product does not belong to the current micro-market',
		itemUsedInAnotherPosOperation: 'The item belongs to another cheque',
		itemIsOverdue: 'Item expired',
		canNotAddCheckItem: 'Can\'t add a product',
		posOperationHasAlreadyPaid: 'Cheque already paid',
		itemHasBeenAlreadyAdded: 'Same product has been already added',
		qrCodeDoesNotBelongToProduct: 'The QR-code does not belong to the product',
		barCodeDoesNotBelongToProduct: 'The barcode does not belong to the product',
		PosOperationIsLockedAnotherRequest: 'The operation is not available yet',
		PosOperationMustBeOpened: 'The purchase must be open',
		addErrorTitle: 'Failed to add this product',
		deleteErrorTitle: 'Failed to delete product',
		payErrorTitle: 'Failed to complete purchase',
		payWithAnotherCardButton: 'Use another card',
		canRetryPayWithin: 'Try again via ',
		tryToPay: 'Try again',
		cancelOperationForUserIsNotFound: 'Canceled cheque not found',
		cancelOperationIsNotQrPurchase: 'A canceled cheque is not a QR Purchase',
		cancelPurchaseHasWrongStatus: 'The canceled cheque has the wrong status',
		purchaseAlreadyCancelled: 'Cheque already canceled',
		success: 'Successfully',
		pleaseWaitForNextAvailablePayTime: 'Please wait for the available payment time',
		cancelPurchase: 'You are canceling your purchase. The purchase contains items that should be returned to the micro-market',
		cancelEmptyPurchase: 'Cancel purchase?\nIf you took the goods, scan a QR-code on its label and click the "Pay" button',
		itemInPromoaction: 'Promotional item',
		bonuses: 'bonuses!',
		calories: 'kcal',
		buttons: {
			cancel: 'Cancel purchase',
			continue: 'Continue purchase',
		},
		tryToBeginNewPurchase: 'Ooops, it seems I can\'t sell you this micro-market üôÇ\nPlease scan the code of the product',
		customAdd: {
			addButton: 'Add',
			title: 'Enter barcode for the product',
			openCustomAdd: 'Enter the code',
		},
	},
	unpaidCheck: {
		prayingSmile: 'üôè',
		payMessage: 'Oops... can\'t open a micromarket. \n You have an unpaid purchase.',
		openCheckButton: 'Open cheque',
		title: 'Purchase is not paid',
	},
	threeDS: {
		title: 'Link the card',
	},
}
